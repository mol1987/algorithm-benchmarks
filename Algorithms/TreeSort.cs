using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;



public partial class AlgorithmBenchmarker
{
    [Benchmark]
    public void TreeSortRun() 
    {
        var data = AutoGenerateData();
        if (data == null)
        {
            Console.WriteLine("Invalid value set in DataSize");
            return;
        }

        BinaryTreeSort(data);
	}

    public void BinaryTreeSort(int[] array)
    {
        var binarySortTreeNode = new BinarySortTreeNode(array[0]);
        for (int i = 1; i < array.Length; i++)
        {
            binarySortTreeNode.Insert(array[i]);
        }
        binarySortTreeNode.InorderTraversal();
    }

}

public class BinarySortTreeNode
{

    public int Key { get; set; }

    public BinarySortTreeNode Left { get; set; }

    public BinarySortTreeNode Right { get; set; }

    public BinarySortTreeNode(int key)
    {
        Key = key;
    }

    public void Insert(int key)
    {
        var tree = new BinarySortTreeNode(key);
        if (tree.Key <= Key)
        {
            if (Left == null)
            {
                Left = tree;
            }
            else
            {
                Left.Insert(key);
            }
        }
        else
        {
            if (Right == null)
            {
                Right = tree;
            }
            else
            {
                Right.Insert(key);
            }
        }
    }

    /// <summary>
    /// In-order traversal
    /// </summary>
    public void InorderTraversal()
    {
        Left?.InorderTraversal();
        Console.Write($"{Key} ");
        Right?.InorderTraversal();
    }

}