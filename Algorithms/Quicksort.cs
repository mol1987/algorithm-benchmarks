using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

// Simple quick sort algorithm
// source: https://csharpskolan.se/article/quick-sort/

public partial class AlgorithmBenchmarker
{
    int amount = 0;
    [Benchmark]
    public void QuickSortRun() 
    {
        var data = AutoGenerateData();
        if (data == null)
        {
            Console.WriteLine("Invalid value set in DataSize");
            return;
        }
        
        QuickSort(data, 0, data.Length - 1);
    }

    public void QuickSort(int[] data, int left, int right)
    {
        amount++;
        //Välj det tal som avgör indelningen i "högre" och "lägre"
        int pivot = data[(left + right) / 2];
        //Välj det område som skall bearbetas
        int leftHold = left;
        int rightHold = right;

        //Så länge vi har ett område kvar
        while (leftHold < rightHold)
        {
            //Hitta ett tal på vänster sida som skall ligga i den "högre" delen
            while ((data[leftHold] < pivot) && (leftHold <= rightHold)) leftHold++;
            //Hitta ett tal på höger sida som skall ligga i den "lägre" delen
            while ((data[rightHold] > pivot) && (rightHold >= leftHold)) rightHold--;

            //Om vi nu har ett område kvar så skall talen på 
            //vänster kant och höger kant byta plats
            if (leftHold < rightHold)
            {
                //Byta plats
                int tmp = data[leftHold];
                data[leftHold] = data[rightHold];
                data[rightHold] = tmp;
                //Minska området om vi flyttat två pivot-tal
                if (data[leftHold] == pivot && data[rightHold] == pivot)
                    leftHold++;
            }
        }
        //Nu när området är bearbetat så skall "lägre" delen bearbetas
        //om sådan finns därefter detsamma med en eventuell "högre" del
        if (left < leftHold - 1) QuickSort(data, left, leftHold - 1);
        if (right > rightHold + 1) QuickSort(data, rightHold + 1, right);
    }
}